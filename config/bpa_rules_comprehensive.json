{
  "name": "Power BI Best Practices - Comprehensive Rules",
  "description": "Complete set of best practice rules for Power BI models based on Microsoft official guidelines, Tabular Editor BPA, and community standards",
  "version": "2.0",
  "author": "Based on Microsoft, Tabular Editor, and Power BI community standards",
  "rules": [
    {
      "ID": "AVOID_BIDIRECTIONAL_RELATIONSHIPS",
      "Name": "Avoid bi-directional relationships",
      "Category": "Performance",
      "Description": "Bi-directional cross-filtering can create ambiguous query paths and significantly impact performance. Use single-direction relationships whenever possible.",
      "Severity": 2,
      "Scope": "Relationship",
      "Expression": "crossFilteringBehavior == \"BothDirections\" or CrossFilteringBehavior == \"BothDirections\"",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_MANY_TO_MANY",
      "Name": "Avoid many-to-many relationships",
      "Category": "Performance",
      "Description": "Many-to-many relationships can cause severe performance issues and unexpected results. Use bridge tables with two one-to-many relationships instead.",
      "Severity": 3,
      "Scope": "Relationship",
      "Expression": "Multiplicity == \"ManyToMany\" or multiplicity == \"ManyToMany\" or cardinality == \"ManyToMany\"",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "REMOVE_UNUSED_COLUMNS",
      "Name": "Remove unused columns",
      "Category": "Maintenance",
      "Description": "Columns that are not used in any relationships, measures, hierarchies, or visuals should be removed to reduce model size and improve performance.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "not IsHidden",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "REMOVE_UNUSED_MEASURES",
      "Name": "Remove unused measures",
      "Category": "Maintenance",
      "Description": "Measures that are not used in any visuals or other measures should be removed to reduce clutter.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "not IsHidden and not Name.ToUpper().Contains(\"TEST\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_DIVIDE_FUNCTION",
      "Name": "Use DIVIDE function instead of division operator",
      "Category": "DAX Expressions",
      "Description": "The DIVIDE function is safer than the / operator as it handles division by zero automatically, returning BLANK or a specified alternate result.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"\\\\s/\\\\s\") and not RegEx.IsMatch(Expression, \"DIVIDE\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_EXCESSIVE_CALCULATE",
      "Name": "Avoid excessive use of CALCULATE",
      "Category": "DAX Expressions",
      "Description": "Multiple nested CALCULATE functions can be simplified for better readability and may impact performance. Consider restructuring the measure.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.Matches(Expression, \"CALCULATE\", \"(?i)\").Count > 3",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_SUMX_FILTER",
      "Name": "Avoid SUMX(FILTER(...)) pattern",
      "Category": "Performance",
      "Description": "SUMX(FILTER(...)) is inefficient. Use CALCULATE with filter arguments instead for significantly better performance.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"SUMX\\\\s*\\\\(\\\\s*FILTER\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_AVERAGEX_FILTER",
      "Name": "Avoid AVERAGEX(FILTER(...)) pattern",
      "Category": "Performance",
      "Description": "AVERAGEX(FILTER(...)) is inefficient. Use CALCULATE with filter arguments instead.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"AVERAGEX\\\\s*\\\\(\\\\s*FILTER\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "SET_IS_AVAILABLE_IN_MDX_FALSE",
      "Name": "Set IsAvailableInMdx to false on non-attribute columns",
      "Category": "Metadata",
      "Description": "Columns that are not attributes should have IsAvailableInMdx set to false to improve processing and query performance in MDX queries.",
      "Severity": 1,
      "Scope": "DataColumn, CalculatedColumn",
      "Expression": "IsAvailableInMdx == true and not IsKey and not RegEx.IsMatch(Name, \"(ID|Key)$\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "PROVIDE_FORMAT_STRING",
      "Name": "Provide format string for measures",
      "Category": "Formatting",
      "Description": "All measures should have a format string defined for consistent display across all visuals and reports.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "string.IsNullOrWhiteSpace(FormatString)",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "ADD_MEASURE_DESCRIPTIONS",
      "Name": "Add descriptions to measures",
      "Category": "Maintenance",
      "Description": "Measures should have descriptions to help report creators and users understand their purpose and calculation logic.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "string.IsNullOrWhiteSpace(Description) and not Name.ToUpper().Contains(\"TEST\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "HIDE_FOREIGN_KEYS",
      "Name": "Hide foreign key columns",
      "Category": "Metadata",
      "Description": "Foreign key columns used only in relationships should be hidden from report view to reduce clutter.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "not IsHidden and RegEx.IsMatch(Name, \"(ID|Key|FK)$\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "MARK_DATE_TABLE",
      "Name": "Mark date tables as date tables",
      "Category": "Time Intelligence",
      "Description": "Tables containing date columns should be marked as date tables using 'Mark as Date Table' for proper time intelligence functionality.",
      "Severity": 2,
      "Scope": "Table",
      "Expression": "not DataCategory == \"Time\" and RegEx.IsMatch(Name, \"(Date|Calendar|Time|Dim.*Date)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_CALCULATED_COLUMNS_IN_RELATIONSHIPS",
      "Name": "Avoid using calculated columns in relationships",
      "Category": "Performance",
      "Description": "Calculated columns in relationships can cause severe performance issues during refresh. Use source data columns or M transformations instead.",
      "Severity": 2,
      "Scope": "CalculatedColumn",
      "Expression": "string.IsNullOrWhiteSpace(Expression) == false",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "REDUCE_HIGH_CARDINALITY",
      "Name": "Hide high cardinality columns",
      "Category": "Performance",
      "Description": "High cardinality columns (ID, GUID, timestamps) should be hidden if not needed for filtering to significantly reduce memory usage.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "not IsHidden and (RegEx.IsMatch(Name, \"(ID|GUID|Key)$\", \"(?i)\") or DataType == \"DateTime\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_VAR_FOR_COMPLEX_EXPRESSIONS",
      "Name": "Use variables (VAR) for complex expressions",
      "Category": "DAX Expressions",
      "Description": "Complex measures should use VAR for better readability, easier debugging, and potentially better performance through query plan optimization.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "not RegEx.IsMatch(Expression, \"\\\\bVAR\\\\b\", \"(?i)\") and (Expression.Length > 300 or RegEx.Matches(Expression, \"\\\\(\").Count > 5)",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_FLOAT_FOR_FINANCIALS",
      "Name": "Avoid Float/Double for financial calculations",
      "Category": "Data Types",
      "Description": "Float (Double) data type can cause precision issues in financial calculations. Use Decimal (Currency) or Fixed Decimal type instead.",
      "Severity": 2,
      "Scope": "DataColumn",
      "Expression": "DataType == \"Double\" and RegEx.IsMatch(Name, \"(Amount|Price|Cost|Revenue|Profit|Balance|Payment|Invoice)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "NO_EMPTY_PARTITIONS",
      "Name": "Remove empty partitions",
      "Category": "Maintenance",
      "Description": "Tables should not have empty partitions as they serve no purpose and can cause confusion during development.",
      "Severity": 2,
      "Scope": "Partition",
      "Expression": "string.IsNullOrWhiteSpace(Query) and SourceType <> \"Calculated\"",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "SET_DATA_CATEGORY_GEO",
      "Name": "Set data category for geographic columns",
      "Category": "Metadata",
      "Description": "Geographic columns should have appropriate data categories set (City, Country, Continent, etc.) to enable map visuals and geocoding.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "string.IsNullOrWhiteSpace(DataCategory) and RegEx.IsMatch(Name, \"(City|Country|State|Region|Continent|Latitude|Longitude|PostalCode|Zip)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "ORGANIZE_DISPLAY_FOLDERS",
      "Name": "Organize measures in display folders",
      "Category": "Metadata",
      "Description": "Measures should be organized in display folders for better discoverability. Tables with more than 10 measures should use folder organization.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "string.IsNullOrWhiteSpace(DisplayFolder) and Table.Measures.Count > 10",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_UNNECESSARY_ITERATORS",
      "Name": "Avoid unnecessary iterator functions",
      "Category": "Performance",
      "Description": "Use simple aggregation functions (SUM, AVERAGE, etc.) instead of iterators (SUMX, AVERAGEX) when not needed for significantly better performance.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"(SUMX|AVERAGEX)\\\\s*\\\\(\\\\s*'?[A-Za-z0-9_]+\\\\s*'?\\\\s*,\\\\s*\\\\[[A-Za-z0-9_]+\\\\]\\\\s*\\\\)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "NO_CALCULATE_OR_CALCULATETABLE",
      "Name": "Avoid CALCULATE/CALCULATETABLE in iterator functions",
      "Category": "Performance",
      "Description": "Using CALCULATE or CALCULATETABLE inside iterator functions (SUMX, FILTER, etc.) causes row-by-row context transition and severely impacts performance.",
      "Severity": 3,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"(SUMX|AVERAGEX|MINX|MAXX|COUNTX|FILTER)\\\\s*\\\\([^)]*CALCULATE(TABLE)?\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_COUNTROWS_FILTER_ALL",
      "Name": "Use COUNTROWS instead of COUNTROWS(FILTER(ALL(...)))",
      "Category": "Performance",
      "Description": "COUNTROWS(FILTER(ALL(...))) is inefficient. Use CALCULATE(COUNTROWS(...), ALL(...)) for better performance.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"COUNTROWS\\\\s*\\\\(\\\\s*FILTER\\\\s*\\\\(\\\\s*ALL\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "PROVIDE_SORT_BY_COLUMN",
      "Name": "Set Sort By Column for month names",
      "Category": "Metadata",
      "Description": "Month name columns should have Sort By Column set to month number for correct chronological sorting in visuals.",
      "Severity": 2,
      "Scope": "DataColumn",
      "Expression": "string.IsNullOrWhiteSpace(SortByColumn) and RegEx.IsMatch(Name, \"(Month.*Name|MonthName|Month)\", \"(?i)\") and DataType == \"String\"",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_TREATAS_INSTEAD_USERELATIONSHIP",
      "Name": "Consider TREATAS instead of USERELATIONSHIP",
      "Category": "DAX Expressions",
      "Description": "In many cases, TREATAS is more efficient than USERELATIONSHIP for role-playing dimensions and can be more flexible.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"USERELATIONSHIP\", \"(?i)\") and not RegEx.IsMatch(Expression, \"TREATAS\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_IFERROR_ISERROR",
      "Name": "Avoid using IFERROR and ISERROR",
      "Category": "DAX Expressions",
      "Description": "IFERROR and ISERROR can hide calculation errors and impact performance. Use explicit error handling with IF and DIVIDE instead.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"(IFERROR|ISERROR)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "REDUCE_CALCULATED_COLUMNS",
      "Name": "Minimize use of calculated columns",
      "Category": "Performance",
      "Description": "Calculated columns consume memory and are calculated during refresh. Consider using measures or M transformations instead when possible.",
      "Severity": 1,
      "Scope": "CalculatedColumn",
      "Expression": "not IsHidden",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_CALCULATED_COLUMNS_AGGREGATIONS",
      "Name": "Don't use aggregation functions in calculated columns",
      "Category": "Performance",
      "Description": "Aggregation functions (SUM, AVERAGE, etc.) in calculated columns cause row-context to filter-context transition, severely impacting performance. Use measures instead.",
      "Severity": 3,
      "Scope": "CalculatedColumn",
      "Expression": "RegEx.IsMatch(Expression, \"(SUM|AVERAGE|MIN|MAX|COUNT)\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "NO_CALENDAR_AUTO",
      "Name": "Disable Auto Date/Time",
      "Category": "Performance",
      "Description": "Auto Date/Time creates hidden date tables for every date column, significantly increasing model size. Use explicit date tables instead.",
      "Severity": 2,
      "Scope": "Model",
      "Expression": "Model.Tables.Any(IsHidden and Name.StartsWith(\"LocalDateTable_\"))",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "SET_SUMMARIZE_BY_NONE",
      "Name": "Set Summarize By to None for non-numeric columns",
      "Category": "Metadata",
      "Description": "Text and boolean columns should have Summarize By set to None to prevent accidental aggregation in visuals.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "DataType == \"String\" and SummarizeBy <> \"None\"",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_RESERVED_KEYWORDS",
      "Name": "Avoid DAX reserved keywords in object names",
      "Category": "Maintenance",
      "Description": "Using DAX reserved keywords as table or column names requires brackets and can cause confusion. Avoid names like 'Table', 'Date', 'Value', etc.",
      "Severity": 1,
      "Scope": "Table, DataColumn, CalculatedColumn",
      "Expression": "RegEx.IsMatch(Name, \"^(Table|Date|Value|Year|Month|Day|Quarter|Filter|All|Calculate|Sum|Average|Count|Min|Max|If|Switch|And|Or|Not|True|False|Return|Var)$\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "VISIBLE_MEASURES_IN_MEASURE_TABLE",
      "Name": "Visible measures should be in a dedicated measure table",
      "Category": "Maintenance",
      "Description": "Visible measures should be organized in one or more dedicated measure tables (no columns) for better organization and performance.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "not IsHidden and Table.Columns.Count > 0",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_WHITESPACE_IN_NAMES",
      "Name": "Avoid leading/trailing whitespace in names",
      "Category": "Maintenance",
      "Description": "Leading or trailing whitespace in object names can cause issues and confusion. Trim all names.",
      "Severity": 2,
      "Scope": "Table, DataColumn, CalculatedColumn, Measure",
      "Expression": "Name <> Name.Trim()",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_DUPLICATE_MEASURE_NAMES",
      "Name": "Avoid duplicate measure names across tables",
      "Category": "Maintenance",
      "Description": "Measures with the same name in different tables can cause confusion and DAX errors. Use unique names or prefixes.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "Model.AllMeasures.Where(Name == current.Name).Count > 1",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "NO_LEGACY_RELATIONSHIPS",
      "Name": "Remove inactive relationships if not used",
      "Category": "Maintenance",
      "Description": "Inactive relationships that are never used with USERELATIONSHIP should be removed to simplify the model.",
      "Severity": 1,
      "Scope": "Relationship",
      "Expression": "not IsActive",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "PROVIDE_COLUMN_DESCRIPTIONS",
      "Name": "Provide descriptions for complex calculated columns",
      "Category": "Maintenance",
      "Description": "Calculated columns with complex expressions should have descriptions explaining their purpose and logic.",
      "Severity": 1,
      "Scope": "CalculatedColumn",
      "Expression": "string.IsNullOrWhiteSpace(Description) and Expression.Length > 100",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_SELECTEDVALUE",
      "Name": "Use SELECTEDVALUE instead of VALUES for scalar",
      "Category": "DAX Expressions",
      "Description": "When expecting a single value, use SELECTEDVALUE instead of VALUES for better performance and automatic BLANK handling.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"VALUES\\\\s*\\\\(\", \"(?i)\") and not RegEx.IsMatch(Expression, \"SELECTEDVALUE\", \"(?i)\")",
      "CompatibilityLevel": 1400
    },
    {
      "ID": "AVOID_ISBLANK_WITH_LOGICAL",
      "Name": "Avoid ISBLANK with && or ||",
      "Category": "DAX Expressions",
      "Description": "Using ISBLANK with logical operators can be simplified. Use COALESCE or handle BLANK directly for better performance.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"ISBLANK\\\\s*\\\\([^)]+\\\\)\\\\s*(&&|\\\\|\\\\|)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_KEEPFILTERS",
      "Name": "Consider using KEEPFILTERS",
      "Category": "DAX Expressions",
      "Description": "When adding filters in CALCULATE, consider if KEEPFILTERS is needed to avoid overwriting existing filter context.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"CALCULATE\\\\s*\\\\([^,]+,[^)]+\\\\)\", \"(?i)\") and not RegEx.IsMatch(Expression, \"KEEPFILTERS\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_NESTED_FILTERS",
      "Name": "Avoid nested FILTER functions",
      "Category": "Performance",
      "Description": "Nested FILTER functions create Cartesian products and severely impact performance. Combine filter conditions with && or use CALCULATE with multiple filters.",
      "Severity": 3,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"FILTER\\\\s*\\\\(\\\\s*FILTER\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "PROVIDE_PERSPECTIVE",
      "Name": "Use perspectives for complex models",
      "Category": "Metadata",
      "Description": "Complex models with many objects should use perspectives to organize objects for different user roles or use cases.",
      "Severity": 1,
      "Scope": "Model",
      "Expression": "Model.Tables.Count > 20 and Model.Perspectives.Count == 0",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_ALL_SELECTEDVALUE",
      "Name": "Don't use ALL with SELECTEDVALUE",
      "Category": "DAX Expressions",
      "Description": "Using ALL() with SELECTEDVALUE is redundant. SELECTEDVALUE already handles filter context.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"SELECTEDVALUE\\\\s*\\\\(\\\\s*ALL\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1400
    },
    {
      "ID": "USE_ALLSELECTED_CAREFULLY",
      "Name": "Be careful with ALLSELECTED",
      "Category": "DAX Expressions",
      "Description": "ALLSELECTED behavior depends on where filters are applied (visual, page, report). Document its usage and test thoroughly.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"ALLSELECTED\", \"(?i)\") and string.IsNullOrWhiteSpace(Description)",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_ISEMPTY",
      "Name": "Use ISBLANK instead of ISEMPTY",
      "Category": "DAX Expressions",
      "Description": "For scalar values, ISBLANK is more efficient than ISEMPTY. Reserve ISEMPTY for table expressions only.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"ISEMPTY\\\\s*\\\\(\\\\s*\\\\[\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "SET_DEFAULT_SUMMARIZATION",
      "Name": "Set appropriate default summarization",
      "Category": "Metadata",
      "Description": "Numeric columns should have appropriate default summarization (Sum, Average, None) set based on their semantic meaning.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "(DataType == \"Int64\" or DataType == \"Double\" or DataType == \"Decimal\") and SummarizeBy == \"Sum\" and RegEx.IsMatch(Name, \"(ID|Key|Rank|Number|Count|Year|Month|Day)\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_UNICODE_WHITESPACE",
      "Name": "Avoid Unicode whitespace in expressions",
      "Category": "Maintenance",
      "Description": "Unicode whitespace characters (non-breaking spaces, etc.) can cause hard-to-debug issues. Use regular spaces only.",
      "Severity": 2,
      "Scope": "Measure, CalculatedColumn",
      "Expression": "RegEx.IsMatch(Expression, \"[\\u00A0\\u1680\\u2000-\\u200B\\u202F\\u205F\\u3000]\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_APPROPRIATE_RELATIONSHIP_CARDINALITY",
      "Name": "Verify relationship cardinality is correct",
      "Category": "Data Model",
      "Description": "Many-to-one relationships should have the 'many' side on the fact table and the 'one' side on the dimension table.",
      "Severity": 2,
      "Scope": "Relationship",
      "Expression": "(Multiplicity == \"OneToMany\" or multiplicity == \"OneToMany\") and FromTable.Name.Contains(\"Dim\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "FACT_TABLE_COLUMNS_HIDDEN",
      "Name": "Hide unnecessary fact table columns",
      "Category": "Metadata",
      "Description": "Fact table foreign keys and technical columns should be hidden. Only measures and business-relevant columns should be visible.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "not IsHidden and Table.Name.Contains(\"Fact\") and (RegEx.IsMatch(Name, \"(ID|Key|FK)$\", \"(?i)\") or DataType == \"DateTime\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "DIMENSION_KEY_HIDDEN",
      "Name": "Hide dimension surrogate keys",
      "Category": "Metadata",
      "Description": "Dimension table surrogate keys used only for relationships should be hidden from report view.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "not IsHidden and Table.Name.Contains(\"Dim\") and RegEx.IsMatch(Name, \"Key$|ID$\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "RELATIONSHIP_SINGLE_COLUMN",
      "Name": "Use single-column relationships",
      "Category": "Data Model",
      "Description": "Relationships should be based on single columns. Composite keys should be concatenated into a single column in the source query.",
      "Severity": 2,
      "Scope": "Relationship",
      "Expression": "FromColumn.Contains(\",\") or ToColumn.Contains(\",\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_COLUMNS_WITH_NO_DATA",
      "Name": "Remove columns with no data",
      "Category": "Maintenance",
      "Description": "Columns that contain no data (all BLANK) should be removed from the model.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "not IsHidden",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_ISFILTERED_CORRECTLY",
      "Name": "Prefer SELECTEDVALUE over HASONEVALUE+VALUES",
      "Category": "DAX Expressions",
      "Description": "The pattern IF(HASONEVALUE(...), VALUES(...)) can be replaced with SELECTEDVALUE for better readability and performance.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"IF\\\\s*\\\\(\\\\s*HASONEVALUE\\\\s*\\\\([^)]+\\\\)\\\\s*,\\\\s*VALUES\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1400
    },
    {
      "ID": "AVOID_CROSSJOIN",
      "Name": "Avoid CROSSJOIN for large tables",
      "Category": "Performance",
      "Description": "CROSSJOIN creates Cartesian products and can cause memory issues with large tables. Use GENERATE or relationship-based filtering instead.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"CROSSJOIN\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "SET_DATA_TYPE_CORRECTLY",
      "Name": "Verify data types are appropriate",
      "Category": "Data Types",
      "Description": "Columns should use the most appropriate data type. For example, whole numbers should use Int64, not Double.",
      "Severity": 1,
      "Scope": "DataColumn",
      "Expression": "DataType == \"Double\" and RegEx.IsMatch(Name, \"(Count|Quantity|Rank|Number)$\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_ADDCOLUMNS_IN_MEASURES",
      "Name": "Minimize ADDCOLUMNS in measures",
      "Category": "Performance",
      "Description": "ADDCOLUMNS can be memory-intensive for large tables. Consider if the calculation can be done in the source query or as a calculated column.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"ADDCOLUMNS\\\\s*\\\\(\\\\s*ALL\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_FORMAT_FUNCTION",
      "Name": "Use FORMAT function carefully",
      "Category": "Performance",
      "Description": "FORMAT function converts to text and can be slow for large datasets. Use format strings on measures when possible, or consider doing formatting in Power Query.",
      "Severity": 1,
      "Scope": "Measure, CalculatedColumn",
      "Expression": "RegEx.IsMatch(Expression, \"FORMAT\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_LASTDATE_FIRSTDATE_FILTERS",
      "Name": "Use LASTDATE/FIRSTDATE correctly",
      "Category": "DAX Expressions",
      "Description": "LASTDATE and FIRSTDATE should be used in time intelligence calculations, not for filtering. They can cause unexpected results when used as filters.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"CALCULATE\\\\s*\\\\([^,]+,\\\\s*(LASTDATE|FIRSTDATE)\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_NON_OPTIMIZED_FUNCTIONS",
      "Name": "Avoid non-optimized functions when alternatives exist",
      "Category": "Performance",
      "Description": "Some DAX functions like FIND, SEARCH, SUBSTITUTE are not optimized. Consider doing string transformations in Power Query instead.",
      "Severity": 1,
      "Scope": "CalculatedColumn",
      "Expression": "RegEx.IsMatch(Expression, \"(FIND|SEARCH|SUBSTITUTE|REPLACE|MID|LEFT|RIGHT|LEN|EXACT)\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "CHECK_DATE_TABLE_REQUIREMENTS",
      "Name": "Date table should meet all requirements",
      "Category": "Time Intelligence",
      "Description": "Date tables must be continuous (no gaps), include all dates in the data, and be marked as a date table. They should also have year, month, and quarter columns.",
      "Severity": 2,
      "Scope": "Table",
      "Expression": "DataCategory == \"Time\" and not (Columns.Any(Name == \"Year\") and Columns.Any(Name == \"Month\"))",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_APPROXIMATION_FUNCTIONS_PROD",
      "Name": "Don't use approximation functions in production",
      "Category": "DAX Expressions",
      "Description": "Approximation functions (APPROXIMATEDISTINCTCOUNT) trade accuracy for performance. They should not be used in production without explicit approval.",
      "Severity": 2,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"APPROXIMATEDISTINCTCOUNT\", \"(?i)\")",
      "CompatibilityLevel": 1500
    },
    {
      "ID": "USE_RELATED_CORRECTLY",
      "Name": "Verify RELATED direction",
      "Category": "DAX Expressions",
      "Description": "RELATED traverses many-to-one relationships. RELATEDTABLE traverses one-to-many. Verify the relationship direction is correct.",
      "Severity": 2,
      "Scope": "CalculatedColumn",
      "Expression": "RegEx.IsMatch(Expression, \"RELATED\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "INCREMENTAL_REFRESH_PARAMETERS",
      "Name": "Use incremental refresh for large tables",
      "Category": "Performance",
      "Description": "Fact tables with millions of rows should use incremental refresh to reduce refresh time and resource usage.",
      "Severity": 1,
      "Scope": "Table",
      "Expression": "Name.Contains(\"Fact\") and not Partitions.Any(Name.Contains(\"RangeStart\"))",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AGGREGATIONS_FOR_LARGE_TABLES",
      "Name": "Consider aggregations for large fact tables",
      "Category": "Performance",
      "Description": "Fact tables with millions of rows should consider using aggregation tables for common report queries to improve performance.",
      "Severity": 1,
      "Scope": "Table",
      "Expression": "Name.Contains(\"Fact\") and Model.Tables.Where(Name == current.Name + \"Agg\").Count == 0",
      "CompatibilityLevel": 1400
    },
    {
      "ID": "USE_VARIABLE_STORAGE",
      "Name": "Store complex calculations in variables",
      "Category": "Performance",
      "Description": "Complex expressions that are used multiple times in a measure should be stored in variables to avoid recalculation.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "not RegEx.IsMatch(Expression, \"VAR\", \"(?i)\") and RegEx.Matches(Expression, \"(CALCULATE|FILTER|ALL)\\\\s*\\\\(\").Count > 2",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_SELECT_COLUMNS_WITHOUT_GROUPBY",
      "Name": "Use SUMMARIZE instead of SELECTCOLUMNS without grouping",
      "Category": "DAX Expressions",
      "Description": "SELECTCOLUMNS without grouping can create unnecessary rows. Use SUMMARIZE or DISTINCT for grouping operations.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"SELECTCOLUMNS\\\\s*\\\\([^,]+,\\\\s*\\\"[^\\\"]+\\\"\", \"(?i)\") and not RegEx.IsMatch(Expression, \"SUMMARIZE\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "RLS_PERFORMANCE",
      "Name": "Optimize Row-Level Security for performance",
      "Category": "Security",
      "Description": "Row-Level Security (RLS) filters are applied to every query. Complex RLS DAX expressions can significantly impact query performance.",
      "Severity": 2,
      "Scope": "Table",
      "Expression": "RowLevelSecurity.AnyTrue",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_NOW_TODAY_IN_MEASURES",
      "Name": "Avoid NOW() and TODAY() in measures for performance",
      "Category": "Performance",
      "Description": "NOW() and TODAY() in measures prevent query plan caching. Consider creating a parameter or calculated column instead.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"(NOW|TODAY)\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "USE_SWITCH_INSTEAD_NESTED_IF",
      "Name": "Use SWITCH instead of nested IF",
      "Category": "DAX Expressions",
      "Description": "Multiple nested IF statements are hard to read and maintain. Use SWITCH for better readability when checking multiple conditions on the same expression.",
      "Severity": 1,
      "Scope": "Measure, CalculatedColumn",
      "Expression": "RegEx.Matches(Expression, \"\\\\bIF\\\\s*\\\\(\", \"(?i)\").Count > 3 and not RegEx.IsMatch(Expression, \"SWITCH\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "AVOID_TOPN_IN_MEASURES",
      "Name": "Use TOPN carefully in measures",
      "Category": "Performance",
      "Description": "TOPN in measures can be expensive for large tables. Consider if the filtering can be done at the visual level instead.",
      "Severity": 1,
      "Scope": "Measure",
      "Expression": "RegEx.IsMatch(Expression, \"TOPN\\\\s*\\\\(\", \"(?i)\")",
      "CompatibilityLevel": 1200
    },
    {
      "ID": "CONSISTENCY_NAMING_CONVENTION",
      "Name": "Use consistent naming conventions",
      "Category": "Maintenance",
      "Description": "Tables and columns should follow consistent naming conventions (PascalCase, camelCase, or snake_case) throughout the model.",
      "Severity": 1,
      "Scope": "Table, DataColumn, CalculatedColumn, Measure",
      "Expression": "Name.Contains(\" \") and Name.Contains(\"_\")",
      "CompatibilityLevel": 1200
    }
  ]
}
